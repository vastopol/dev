
1.)
using typedef for cleaner code
like an alias

typedef list<int>::iterator Iter;

now can just type "Iter" not "list<int>::iterator"

ex.

list<int>::iterator front = myList.begin()
OR
Iter front = myList.end()
//-------------------------------------------------------------

2.)

simpler return statements

instead of

bool empty()
{
    if(head->next == tail)
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool empty()
{
    return head->next == tail;
}

//its already a boolean evaluation that you can just return

//-------------------------------------------------------------------

3.)

ternary operator  

//takes 3 args

//(1 ? 2:3 )
//1 is a boolean expression, the return value determines what happens
//2&3  have to be expressions of the same type

( boolean expression ? expression to do if true : expression to do if false)

( isPalindrome(str) ? "Palindrome!" : "Not Palindrome")



//numeric library

using the iota to fill vector...


//algorithm libraery
 random_shuffle
 
 
 switch statements clean up if/else if/else..
 

 
 ////////////////////////////////////////////////////////////
 
 C style unsafe type casting
 
 int x = 44;
 
 cout << (char)(x) << endl;
 
 this will output a char now...
 
 ///////////////////////////////////////////////////////////////

timing

//const int CLOCKS_PER_MS = CLOCKS_PER_SEC/1000; //clock per milliseconds
// clock_t Start = clock();
// //call sort function here
// clock_t End = clock();
// int elapsedTime = (End - Start)/CLOCKS_PER_MS; // converts elapsed time from microseconds to milliseconds.